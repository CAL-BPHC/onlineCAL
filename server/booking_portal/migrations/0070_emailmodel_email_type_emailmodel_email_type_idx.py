# Generated by Django 4.2.20 on 2025-09-09 19:39

from django.db import migrations, models


def populate_email_types(apps, schema_editor):
    """Populate email_type field based on existing subject lines"""
    email_model = apps.get_model("booking_portal", "EmailModel")

    subject_to_type_mapping = {
        "Waiting for Faculty Approval": "faculty_approval",
        "Pending Lab Booking Request": "pending_booking",
        "Waiting for Department Approval": "department_approval",
        "Waiting for Lab Assistant Approval": "lab_assistant_approval",
        "Lab Booking Approved": "booking_approved",
        "Lab Booking Rejected": "booking_rejected",
        "Lab Booking Cancelled": "booking_cancelled",
        "New Announcement Created on CAL Portal": "new_announcement",
        "Welcome to OnlineCAL!": "welcome",
    }

    for email in email_model.objects.all():
        if email.subject in subject_to_type_mapping:
            email.email_type = subject_to_type_mapping[email.subject]
        else:
            email.email_type = "other"
        email.save()


class Migration(migrations.Migration):

    dependencies = [
        ("booking_portal", "0069_slot_slot_status_date_idx"),
    ]

    operations = [
        migrations.AddField(
            model_name="emailmodel",
            name="email_type",
            field=models.CharField(
                choices=[
                    ("faculty_approval", "Waiting for Faculty Approval"),
                    ("pending_booking", "Pending Lab Booking Request"),
                    ("department_approval", "Waiting for Department Approval"),
                    ("lab_assistant_approval", "Waiting for Lab Assistant Approval"),
                    ("booking_approved", "Lab Booking Approved"),
                    ("booking_rejected", "Lab Booking Rejected"),
                    ("booking_cancelled", "Lab Booking Cancelled"),
                    ("new_announcement", "New Announcement Created on CAL Portal"),
                    ("welcome", "Welcome to OnlineCAL!"),
                    ("other", "Other"),
                ],
                default="other",
                help_text="Type of email for categorization and filtering",
                max_length=50,
            ),
        ),
        migrations.AddIndex(
            model_name="emailmodel",
            index=models.Index(fields=["email_type"], name="email_type_idx"),
        ),
        migrations.RunPython(populate_email_types, migrations.RunPython.noop),
    ]
